{"remainingRequest":"C:\\todo.list\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\todo.list\\src\\components\\HelloWorld.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\todo.list\\src\\components\\HelloWorld.vue","mtime":1553532777611},{"path":"C:\\todo.list\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\todo.list\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\todo.list\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\todo.list\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      text: '',\n      selected: 0,\n      items: [],\n      tasks: ['Selected']\n    }\n  },\n  methods: {\n    showModal() {\n      this.$refs.myModalRef.show()\n    },\n    hideModal() {\n      this.$refs.myModalRef.hide()\n    },\n    toggleModal() {\n        // We pass the ID of the button that we want to return focus to when\n        // the modal has hidden\n        this.$refs.myModalRef.toggle('#toggleBtn')\n    },\n    add() {\n      if(this.text) {\n        this.items.push(this.text)\n        this.text = ''\n        this.hideModal()\n      }\n    },\n    cancel() {\n      this.text = ''\n      this.hideModal()\n    },\n    getTasks() {\n      \n    }\n  }\n};\n",{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"hello\">\n    <b-button block variant=\"primary\" @click=\"showModal\">Добавить элемент</b-button>\n\n    <b-modal ref=\"myModalRef\" hide-footer title=\"Добавление нового элемента\">\n      <div class=\"d-block text-center\">\n        <b-form-input v-model=\"text\" type=\"text\" placeholder=\"Введите текст\" />\n      </div>\n      <b-button class=\"mt-3\" variant=\"outline-danger\" block @click=\"add\">Добавить</b-button>\n      <b-button class=\"mt-2\" variant=\"outline-warning\" block @click=\"cancel\">Отмена</b-button>\n    </b-modal>\n\n    <b-list-group>\n      <b-list-group-item v-for=\"(item, id) in items\">{{ item }}</b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      text: '',\n      selected: 0,\n      items: [],\n      tasks: ['Selected']\n    }\n  },\n  methods: {\n    showModal() {\n      this.$refs.myModalRef.show()\n    },\n    hideModal() {\n      this.$refs.myModalRef.hide()\n    },\n    toggleModal() {\n        // We pass the ID of the button that we want to return focus to when\n        // the modal has hidden\n        this.$refs.myModalRef.toggle('#toggleBtn')\n    },\n    add() {\n      if(this.text) {\n        this.items.push(this.text)\n        this.text = ''\n        this.hideModal()\n      }\n    },\n    cancel() {\n      this.text = ''\n      this.hideModal()\n    },\n    getTasks() {\n      \n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}